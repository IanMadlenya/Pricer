{"version":3,"sources":["../../Pricer.Fabled/Charting.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOK,gCAPL;AAAA;;AAAA;AAAA;AAAA,KAOK;;AAKA,sCAZL;AAAA;;AAAA;AAAA;AAAA,KAYK;;AA2BE;AAEC,uDACI;AAAA,kDAAuB;AAAA;AAAA,2DACnB,UACQ,aADR,IADmB;AAAC,aAAxB;AAKiB,SANrB;;AAQA,+CACA;AAAA,sCAAsB;AAAA;AAAA,oEAClB,kCAEa,wBAFb,CADkB;AAAG,aAAzB;AAIM,SALN;;AAOA,mDACI;AAAA;AAAA,2BAAQ,oFAAR,EAEJ,qDAAqD,uBAArD,CAFI,EAIJ,2CAA2C,uBAA3C,CAJI;AAAK,SADT;;AAQA,qDACI;AAAQ;AACO;AACnB;AACA;AAHS,SADT;;AAMA,+CACI;AAAA;AACM,4HAEiB,oBAFjB,iBAGqB,yBAEN,4BAFM,CAHrB,EAQE,WACI;AAAA,uDACA;AAAA;AAAkB,iBAAlB,CADA;AAAe,aAAf,CADJ,CARF,IAYK;AAAA;AAA0B,aAA1B,EAZL;AAcV;AAfU,SADV;;AA/BD;AA+BW,KA/BX","file":"Charting.js","sourcesContent":["ï»¿namespace Pricer.Fabled\r\n\r\nopen Fable.Core\r\nopen Fable.Import.Browser\r\nopen Fable.Import\r\nopen Pricer.Core\r\n\r\ntype Value = {\r\n    x: int\r\n    y: float\r\n}\r\n\r\ntype LineData = {\r\n    key: string\r\n    values: Value array\r\n}\r\n\r\ntype Axis = \r\n    abstract axisLabel: string -> Axis\r\n    abstract tickFormat: System.Func<float,string> -> Axis\r\n\r\ntype LineChart = \r\n    abstract xAxis: Axis\r\n    abstract yAxis: Axis\r\n    abstract useInteractiveGuideline: bool -> LineChart   \r\n    abstract showLegend: bool -> LineChart\r\n    abstract showXAxis: bool -> LineChart\r\n    abstract showYAxis: bool -> LineChart\r\n    \r\n\r\ntype models = \r\n    abstract lineChart: unit -> LineChart\r\n\r\n[<Erase>]\r\nmodule nv =\r\n    let models: models = failwith \"JS only\"\r\n    let addGraph: System.Func<LineChart> -> unit = \r\n        failwith \"JS Only\"\r\n\r\nmodule Charting =\r\n \r\n    let tuplesToPoints (data: (float*float) list) = \r\n            data |> List.map (fun (x,y) -> \r\n                {\r\n                    x = int x\r\n                    y = y\r\n                }\r\n            ) |> Array.ofList\r\n\r\n    let buildLines (data:(Leg*(float*float) list) seq)= \r\n        data |> Seq.map (fun (leg,linedata) -> \r\n            {\r\n                key = leg.Definition.Name\r\n                values = linedata |> tuplesToPoints\r\n            })\r\n\r\n    let genrateChart (data:LineData array) = \r\n        let chart = nv.models.lineChart().useInteractiveGuideline(true).showLegend(true).showXAxis(true)\r\n\r\n        chart.xAxis.axisLabel(\"Underlying Price\").tickFormat(D3.Globals.format(\",.1f\")) |> ignore\r\n        \r\n        chart.yAxis.axisLabel(\"Profit\").tickFormat(D3.Globals.format(\",.1f\")) |> ignore\r\n        chart\r\n\r\n    let drawLineChart (data: LineData array) =      \r\n        let chart = genrateChart data\r\n        let chartElement = D3.Globals.select(\"#payoffchart\")\r\n        chartElement.style(\"height\",\"300px\") |> ignore\r\n        chartElement.datum(data).call(chart) |> ignore\r\n\r\n    let drawPayoff data =\r\n        let payoff = \r\n            match data with\r\n                | SingleYear (strategyData, legsData) ->\r\n                    let legLines = buildLines legsData\r\n                    let strategyLine = {\r\n                        key = \"Strategy\"\r\n                        values = strategyData |> tuplesToPoints\r\n                    }\r\n                        \r\n                    seq {\r\n                        yield! legLines\r\n                        yield strategyLine\r\n                    } |> Array.ofSeq\r\n                | _ -> failwith \"not implemented\"\r\n\r\n        drawLineChart payoff        "]}