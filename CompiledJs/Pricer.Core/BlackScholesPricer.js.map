{"version":3,"sources":["../../../Pricer.Core/BlackScholesPricer.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0CAIK;AAAA;;AAAmB;AAAD;;;;wDAGX;AAAA;;AAEA,mCAAG,uBAAH,GAEQ;AACA,8BAAE,SAAI,kCAAJ,IACE,CAAC,aAAa,MAAM,6BAApB,uBADJ,KAEE,mBAAmB,8BAFrB;AAGK,kCAAK,mBAAmB,8BAAxB;;AACA;;AACA;;AAEc,2DAAgB,SAAK,iCAAL,CAAhB;AACZ,yDAA0B,qBAA1B;;AACL;AAAA,gCAEO,4CAFP,EAEqD,MAFrD;AAAA;AAAA;AAAA;AAVA,iBAAF,EAFR,GAiBU,8BAEY,kCAAL,OAAK,kCAAL,IAFP,QACa,kCAAL,OAAK,kCAAL,IADR,IAjBV;AAoBJ;AAtBe","file":"BlackScholesPricer.js","sourceRoot":"C:/dev/Pricer/Pricer.Fabled/CompiledJs/Pricer.Core","sourcesContent":["ï»¿namespace Pricer.Core\r\n\r\nopen System\r\n\r\ntype BlackScholesPricer(math:IMathProvider) = \r\n    \r\n    member this.blackScholes (stock:StockInfo) (option:OptionLeg) =\r\n        let price,delta =\r\n            // We can only calculate if the option concerns the future\r\n            if option.TimeToExpiry > 0.0 then\r\n                // Calculate d1 and d2 and pass them to cumulative distribution\r\n                let d1 =\r\n                    ( log(stock.CurrentPrice / option.Strike) +\r\n                        (stock.Rate + 0.5 * pown stock.Volatility 2) * option.TimeToExpiry ) /\r\n                    ( stock.Volatility * sqrt option.TimeToExpiry )\r\n                let d2 = d1 - stock.Volatility * sqrt option.TimeToExpiry\r\n                let N1 = math.cdf(d1)\r\n                let N2 = math.cdf(d2)\r\n\r\n                let discountedStrike = option.Strike * exp (-stock.Rate * option.TimeToExpiry)\r\n                let call = stock.CurrentPrice * N1 - discountedStrike * N2\r\n                match option.Kind with\r\n                    | Call -> call, N1\r\n                    | Put -> call + discountedStrike - stock.CurrentPrice, N1 - 1.0\r\n            else\r\n                // If the option has expired, calculate payoff directly\r\n                match option.Kind with\r\n                    | Call -> max (stock.CurrentPrice - option.Strike) 0.0,1.0\r\n                    | Put -> max (option.Strike - stock.CurrentPrice) 0.0,1.0\r\n        {\r\n            Premium = price\r\n            Delta = delta\r\n        }\r\n\r\n    \r\n"]}