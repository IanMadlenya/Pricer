{"version":3,"sources":["../../../Pricer.Core/OptionsAnalyzer.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AAAA,yCASK;AAAA;;AAAiB;AAAF;;;;kDAGyD;AAAA;AAAA;AAAA,mBAA5D,mBAA4B;AAAA;AAAA;AAAA;AAAA,iBAA5B,QAA4D;AAAc;;;qEAE5C;AAAA;AAAA,2FAMxB,qBANwB;AAO1C;;;6DAGO;AAAA;;AAAW,qDAAC;AAAA,8CAAqB;AAAA;;AAAA,qEAAqB,OAArB;AAAmC,qBAAxD,EAAW,0BAAX;AAAA,kBAAD;;AACD,oDAAC;AAAA;AAAA;AAAA,uBAAW,+CAAyB,wBAAzB,CAAX;AAAA,kBAAD;;AAEF,2CACJ;AAAkB,mDACd;AAAS;;AAAT,wCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwB,yBAAxB,EAAD,eADH;AAAM,qBADQ;;AAItB,qCACa,mDADb;AAJQ,iBADA;AAHA;;;yDAgBR;AAAA;;AAAW,qDAAC;AAAA,8CAAoB;AAAA;;AAAA,qEAAsB,MAAtB;AAAqC,qBAAzD,EAAS,2BAAT;AAAA,kBAAD;;AACF,sDAAC,6CAAD,EAAU,6CAAV;;AAEH,0CACF;AAAmB,mDACf;AAAS;AAAa;AAAqC;AAAlD;AAAqD,yBAArD;;AAAT,wCACG,iDAAqC,8CAArC,CADH;AAAM,qBADS;;AAIvB,qCACa,+BADb;AAJQ,iBADF;AAHE;;;sDAeR;AAAA;;AAAW,qDAAC;AAAA,8CAAoB;AAAA;;AAAA,qEAAsB,MAAtB;AAAqC,qBAAzD,EAAS,2BAAT;AAAA,kBAAD;;AACD,oDAAC;AAAA,8CAAoB;AAAA,0DAA4B,2BAA5B;AAAA,qBAApB,EAAS,2BAAT;AAAA,kBAAD;;AAEK;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,qBAAP;AAAO,iBAAP;;AAEH,0CACR;AAAS;AAAmB;AAAa;AAAhC;AAAoC,qBAApC;;AACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwB,qBAAxB;;AACd,iDACiB,6CADjB;AAFU,iBADE;AALJ","file":"OptionsAnalyzer.js","sourceRoot":"C:/dev/Pricer/Pricer.Fabled/CompiledJs/Pricer.Core","sourcesContent":["ï»¿namespace Pricer.Core\r\n\r\nopen System\r\n\r\ntype Serie<'a> = {\r\n    Series: string;\r\n    Values: 'a list\r\n}\r\n\r\ntype OptionsAnalyzer (pricer:IPricer) =\r\n\r\n    let combine alist blist =\r\n        alist |> Seq.map (fun el -> blist |> Seq.map(fun el2 -> el, el2)) |> Seq.collect id\r\n\r\n    let buildOption strike style expiry kind = {\r\n        Direction = 1.0\r\n        Strike = strike\r\n        Kind = kind\r\n        Expiry = expiry\r\n        Style = style\r\n        PurchaseDate = DateTime.Now\r\n    }\r\n    //returns several lines, one per expiry\r\n    let optionPrices stock kind style = \r\n        let expiries = [for day in 0 .. 8 -> DateTime.Now.AddDays(float day*3.0)]\r\n        let strikes = [for ref in 0.9*stock.CurrentPrice ..stock.CurrentPrice*1.1 -> ref]\r\n         \r\n        expiries |> List.map (fun expiry -> \r\n            let data = strikes |> List.map (fun strike ->\r\n                let option = buildOption strike style expiry kind\r\n                strike,(pricer.priceOption stock option).Premium\r\n            )\r\n            {\r\n                Series = expiry.ToString(\"d\")\r\n                Values = data\r\n            }\r\n        )\r\n\r\n    //returns 2 lines, one for each style, strike is fixed by Current\r\n    let americanVsEuropeanPut stock = \r\n        let expiries = [for i in 1 .. 10 -> DateTime.Now.AddDays ((float i)*80.0)]\r\n        let styles = [American;European]\r\n\r\n        styles |> Seq.map (fun (style) ->\r\n            let data = expiries |> List.map (fun expiry ->\r\n                let option = buildOption (stock.CurrentPrice*1.5) style expiry Put\r\n                expiry,(Binomial.binomial stock option 1000 Implementation.Imperative).Premium\r\n            )\r\n            {\r\n                Series = style.ToString()\r\n                Values = data\r\n            }\r\n        )\r\n    //returns multiple triples strike - expiry - pricing result\r\n    let optionPricesTripes stock = \r\n        let expiries = [for i in 1 .. 10 -> DateTime.Now.AddDays ((float i)*80.0)]\r\n        let strikes = [for i in 1 .. 10 -> stock.CurrentPrice * 0.6 +  stock.CurrentPrice/10.0 * float i]\r\n\r\n        let combinations = combine strikes expiries\r\n\r\n        combinations |> Seq.map (fun (strike, exp) ->\r\n            let option = buildOption strike European exp Call\r\n            let pricing = pricer.priceOption stock option\r\n            {\r\n                Definition = Option option\r\n                Pricing = Some pricing\r\n            }\r\n        )\r\n\r\n"]}