{"version":3,"sources":["../../../Pricer.Core/OptionsModel.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIO;AAJP,6DAKsC;AAAA,mBAAG,aAAH;AAAyC,SAL/E;;AAAA,6DAMsC;AAAA,mBAAG,oBAAH;AAAwC,SAN9E;;AAIO;AAJP,KAIO;;;AAJP;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;uCAWkC;AAAA;AAAC;;;;;;;;;AAXnC;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;uCAgBkC;AAAA;AAAC;;;;;;;;;AAhBnC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;gCA6B8C;AAAA;AAA4B;;;gCAC3C;AAAA;;AAAA,uBAAO;AAAC;;AAAD;AAAsC,iBAAtC,EAAP;AAAoD;;;gCAC5D;AAAA,uBAAQ,wCAAR;AAAA;AAAA,mCAAqC,mCAArC;AAAsE;;;;;;;;;AA/B7F;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;gCAsC8C;AAAA;AAA4B;;;;;;;;;AAtC1E;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;gCAqD6B;AAAA,oGAGgC,wCAAR;AAAA;AAAA,4CAHxB;AAAI;;;;;;;;;AArDjC;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAsFO;AAtFP,iDAwFc;AAAA,gDAEW,IAAS,0BAAT,OAAS,0BAFpB,GACY,IAAS,0BAAT,OAAS,0BADrB;AAAW,SAxFzB;;AAAA,2CA6FQ;AAEW;AAFX,kEAKY,+BALZ;AAOC,SApGT;;AAsFO;AAtFP,KAsFO","file":"OptionsModel.js","sourceRoot":"C:/dev/Pricer/Pricer.Fabled/CompiledJs/Pricer.Core","sourcesContent":["ï»¿namespace Pricer.Core\r\n\r\nopen System\r\n\r\nmodule Transforms = \r\n    let directionToString direction = if direction < 0.0 then \"Sell\" else \"Buy\"\r\n    let stringToDirection direction = if direction = \"Sell\" then -1.0 else 1.0\r\n\r\ntype OptionKind =\r\n    | Call\r\n    | Put\r\n    override x.ToString() = match x with | Call -> \"Call\" | _ -> \"Put\"\r\n\r\ntype OptionStyle =\r\n    | American\r\n    | European\r\n    override x.ToString() = match x with | American -> \"American\" | _ -> \"European\"\r\n\r\n\r\n\r\ntype OptionLeg =\r\n    {\r\n        Direction : float\r\n        Strike : float\r\n        Expiry : DateTime\r\n        Kind : OptionKind\r\n        Style: OptionStyle\r\n        PurchaseDate: DateTime\r\n    }\r\n    member this.BuyVsSell = this.Direction |> Transforms.directionToString\r\n    member this.TimeToExpiry = (float (this.Expiry - this.PurchaseDate).Days)/365.0\r\n    member this.Name = sprintf \"%s %s %.2f\" this.BuyVsSell (this.Kind.ToString()) this.Strike\r\n\r\ntype CashLeg = \r\n    {\r\n        Direction: float\r\n        Price:float\r\n    }\r\n    member this.BuyVsSell = this.Direction |> Transforms.directionToString\r\n\r\ntype ConvertibleLeg = {\r\n    Direction: float\r\n    Coupon: float\r\n    ConversionRatio: float\r\n    Maturity: DateTime\r\n    FaceValue: float\r\n    ReferencePrice: float\r\n}\r\n\r\ntype LegInfo =\r\n    | Cash of CashLeg\r\n    | Option of OptionLeg\r\n    | Convertible of ConvertibleLeg\r\n    member this.Name = match this with\r\n                            | Cash cl -> \"Cash\"\r\n                            | Option ol -> ol.Name\r\n                            | Convertible convert -> sprintf \"Convert %f\" convert.FaceValue\r\ntype Pricing = {\r\n    Delta: float\r\n    Premium: float\r\n}\r\n\r\ntype Leg = {\r\n    Definition:LegInfo\r\n    Pricing:Pricing option\r\n}\r\n\r\ntype Strategy = {\r\n    Stock : StockInfo\r\n    Name : String\r\n    Legs: Leg list\r\n}\r\n\r\ntype LegData = {\r\n    Leg:Leg\r\n    LegData: float*float list\r\n}\r\n\r\ntype SingleLine =  (float*float) list\r\n\r\ntype LegsData = Leg * SingleLine\r\n\r\ntype StrategyData = \r\n    | SingleYear of SingleLine * ((Leg * SingleLine) seq)\r\n    | MultiYear of SingleLine seq\r\n\r\nmodule BasicOptions = \r\n    let optionValue option stockPrice =\r\n        match option.Kind with\r\n                | Call -> max 0.0 (stockPrice - option.Strike)\r\n                | Put -> max 0.0 (option.Strike - stockPrice)\r\n\r\n    let buildLeg kind strike direction style expiry buyingDate =\r\n        {\r\n            Strike=strike\r\n            Kind = Call\r\n            Direction = direction\r\n            Expiry = expiry\r\n            Style = European\r\n            PurchaseDate = buyingDate\r\n        }\r\n\r\n\r\ntype IMathProvider = \r\n    abstract member cdf: float -> float\r\n\r\ntype IPricer =\r\n    abstract member priceOption: StockInfo -> OptionLeg -> Pricing\r\n    abstract member priceCash: CashLeg -> Pricing\r\n    abstract member priceConvert: StockInfo -> ConvertibleLeg -> Pricing"]}