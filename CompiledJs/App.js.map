{"version":3,"sources":["../App.fs"],"names":[],"mappings":"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","file":"App.js","sourcesContent":["ï»¿namespace Pricer.Fabled\r\n\r\nopen System\r\nopen Pricer.Core\r\nopen Fable.Core\r\nopen Fable.Import\r\n\r\n[<Erase>]\r\nmodule Lib =\r\n    let [<Global>] Vue: obj = failwith \"JS only\"\r\n    let [<Global>] Router: obj = failwith \"JS only\"\r\n\r\n\r\n// This helper uses JS reflection to convert a class instance\r\n// to the options' format required by Vue\r\nmodule VueHelper =\r\n    let createFromObj(data: obj, extraOpts: obj) =\r\n        let methods = obj()\r\n        let computed = obj()\r\n        let proto = JS.Object.getPrototypeOf data\r\n        for k in JS.Object.getOwnPropertyNames proto do\r\n            let prop = JS.Object.getOwnPropertyDescriptor(proto, k)\r\n            match prop.value with\r\n            | Some f ->\r\n                methods?(k) <- f\r\n            | None ->\r\n                computed?(k) <- createObj [\r\n                    \"get\" ==> prop?get\r\n                    \"set\" ==> prop?set\r\n                ]\r\n        extraOpts?data <- data\r\n        extraOpts?computed <- computed\r\n        extraOpts?methods <- methods\r\n        createNew Lib.Vue extraOpts\r\n\r\nmodule Main =\r\n    let dateToString (date:DateTime) = \r\n        sprintf \"%i-%0i-%0i\" date.Year date.Month date.Day\r\n    \r\n    let pricer = new SimplePricer()\r\n    let payoffsGenerator = new PayoffsGenerator(pricer)\r\n\r\n    type StockViewModel(s:StockInfo) = \r\n        let mutable rate = s.Rate\r\n        let mutable volatility = s.Volatility\r\n        let mutable currentPrice = s.CurrentPrice\r\n\r\n        member __.buildStock = {\r\n            Rate = rate\r\n            Volatility = volatility\r\n            CurrentPrice = currentPrice\r\n        }\r\n\r\n    type LegViewModel(l:Leg) = \r\n        let mutable leg = l\r\n        let mutable strike = 0.0\r\n        let mutable expiry = \"test\"\r\n        let mutable kind = \"Option\"\r\n        let mutable direction = \"Buy\"       \r\n        \r\n        let getDirection direction = if direction = 1.0 then \"Buy\" else \"Sell\"\r\n        let getKind kind = if kind = Put then \"Put\" else \"Call\"\r\n        do \r\n            match l.Definition with\r\n                    | Option opt -> \r\n                        strike <- opt.Strike\r\n                        expiry <- opt.Expiry |> dateToString\r\n                        direction <- opt.Direction |> getDirection\r\n                        kind <- opt.Kind |> getKind\r\n                    | Cash cash -> \r\n                        kind <- \"Cash\"\r\n                        direction <- cash.Direction |> getDirection\r\n                    | _ -> ()\r\n        \r\n        member __.getLeg = \r\n            if kind = \"Cash\" then \r\n                {\r\n                    Definition = Cash { \r\n                        Direction = if direction = \"Buy\" then 1.0 else -1.0\r\n                        Price = strike\r\n                    }\r\n                    Pricing = None\r\n                }\r\n            else\r\n                {\r\n                    Definition = Option { \r\n                        Direction = if direction = \"Buy\" then 1.0 else -1.0\r\n                        Expiry = DateTime.Now\r\n                        Strike = strike\r\n                        PurchaseDate = DateTime.Now\r\n                        Kind = if kind = \"Put\" then Put else Call\r\n                        Style = European\r\n                    }\r\n                    Pricing = None\r\n                }\r\n\r\n    type StrategyViewModel(strategy) =\r\n        let mutable legs = strategy.Legs |> List.map (fun l -> LegViewModel(l)) |> Array.ofList\r\n        let mutable name = strategy.Name\r\n        let mutable stock = new StockViewModel(strategy.Stock)\r\n        \r\n        member __.addLeg(event) = \r\n            let  newLeg: Leg = {\r\n                Definition = Option {\r\n                    Direction = 1.0\r\n                    Strike = 100.0\r\n                    Expiry = DateTime.Now\r\n                    Kind = Call\r\n                    Style = European\r\n                    PurchaseDate = DateTime.Now\r\n                }\r\n                Pricing = None\r\n            }\r\n\r\n            legs <- (legs |> Array.append [|new LegViewModel(newLeg)|])\r\n        \r\n        member __.removeLeg(leg:LegViewModel) =\r\n            legs <- (legs |> Array.filter (fun l -> l.getLeg <> leg.getLeg))\r\n\r\n        member __.generatePayoff() = \r\n            let newStrategy = {\r\n                Name = name\r\n                Legs = legs |> Seq.map (fun l -> l.getLeg) |> List.ofSeq\r\n                Stock = stock.buildStock\r\n            }\r\n            let data = payoffsGenerator.getStrategyData newStrategy\r\n            Charting.drawPayoff data\r\n\r\n\r\n\r\n    type StrategyListViewModel(examples) = \r\n        let mutable strategies = examples |> List.map (fun s -> new StrategyViewModel(s)) |> Array.ofList\r\n        let mutable selectedStrategy: StrategyViewModel option = None\r\n\r\n        member __.allStrategies = strategies\r\n        member __.select strat = \r\n            selectedStrategy <- Some strat\r\n            selectedStrategy.Value.generatePayoff()\r\n\r\n        member __.strategy = selectedStrategy\r\n        \r\n    type Directives =\r\n        abstract ``todo-focus``: obj option -> unit\r\n            \r\n    let extraOpts =\r\n        createObj [\r\n            \"el\" ==> \".payoffapp\"           \r\n            \"directives\" ==> {\r\n                new Directives with\r\n                    member this.``todo-focus`` x =\r\n                        match x with\r\n                        | None -> ()\r\n                        | Some _ ->\r\n                            let el = this?el\r\n                            Lib.Vue?nextTick$(fun () ->\r\n                                el?focus$() |> ignore)\r\n                            |> ignore\r\n            } \r\n        ]\r\n\r\n    let vm = StrategyListViewModel(StrategiesExamples.exampleStrategies)\r\n    vm.select vm.allStrategies.[4]\r\n    vm.strategy.Value.generatePayoff()\r\n    let app = VueHelper.createFromObj(vm, extraOpts)"]}