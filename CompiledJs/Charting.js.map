{"version":3,"sources":["../Charting.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;AAqCO;AArCP,uDA6CiB;AAAA,8BALG,oBACJ;AAAA;AAAA,aADI,OAKH;AAAY,SA7C7B;;AAAA,+CAgDgB;AAAA,sCACJ;AAAA,kEAEyB,4BAFzB;AAAA,aADI;AAIF,SApDd;;AAAA,mDAuDY;AAAQ;AAEZ,iEAAqD,iBAArD;AAEA,uDAA2C,iBAA3C;AAJI;AAAK,SAvDjB;;AAAA,6EAgEY;AAAU;AACd;AADI;AAAO,SAhEnB;;AAAA,yEAoEoC;AAAA;AAAyC,SApE7E;;AAAA,qDAuEY;AAAQ;AACI;AACG;AACA;AACnB;AACA;AALS,SAvEjB;;AAAA,+CA+EY;AACM,sDAEM;AAAW;AACI,4DAEU,8BAFV;AAQd,kCAFD;AAAA,2DACA;AAAA;AAAA,sBADA;AAAA,kBAEC;AATO,aAAR,EAFN,GAYK;AAAA;AAA0B,aAA1B,EAZL;AAcV;AAfU,SA/ElB;;AAqCO;AArCP,KAqCO","file":"Charting.js","sourceRoot":"C:/dev/Pricer/Pricer.Fabled/CompiledJs","sourcesContent":["ï»¿namespace Pricer.Fabled\r\n\r\nopen Fable.Core\r\nopen Fable.Import.Browser\r\nopen Fable.Import\r\nopen Pricer.Core\r\n\r\ntype Value = {\r\n    x: int\r\n    y: float\r\n}\r\n\r\ntype LineData = {\r\n    key: string\r\n    values: Value array\r\n}\r\n\r\ntype Axis = \r\n    abstract axisLabel: string -> Axis\r\n    abstract tickFormat: System.Func<float,string> -> Axis\r\n\r\ntype LineChart = \r\n    abstract xAxis: Axis\r\n    abstract yAxis: Axis\r\n    abstract useInteractiveGuideline: bool -> LineChart   \r\n    abstract showLegend: bool -> LineChart\r\n    abstract showXAxis: bool -> LineChart\r\n    abstract showYAxis: bool -> LineChart\r\n    \r\n\r\ntype models = \r\n    abstract lineChart: unit -> LineChart\r\n\r\n[<Erase>]\r\nmodule nv =\r\n    let models: models = failwith \"JS only\"\r\n\r\nmodule Charting =\r\n \r\n    let tuplesToPoints (data: (float*float) list) = \r\n            data |> List.map (fun (x,y) -> \r\n                {\r\n                    x = int x\r\n                    y = y\r\n                }\r\n            ) |> Array.ofList\r\n\r\n    let buildLines (data:(Leg*(float*float) list) seq)= \r\n        data |> Seq.map (fun (leg,linedata) -> \r\n            {\r\n                key = leg.Definition.Name\r\n                values = linedata |> tuplesToPoints\r\n            })\r\n\r\n    let genrateChart (data:LineData array) = \r\n        let chart = nv.models.lineChart().useInteractiveGuideline(true).showLegend(true).showXAxis(true)\r\n\r\n        chart.xAxis.axisLabel(\"Underlying Price\").tickFormat(D3.Globals.format(\",.1f\")) |> ignore\r\n        \r\n        chart.yAxis.axisLabel(\"Profit\").tickFormat(D3.Globals.format(\",.1f\")) |> ignore\r\n        chart\r\n\r\n\r\n    let clearAndGetParentChartDiv (selector:string) =\r\n        let element = D3.Globals.select(selector);\r\n        element.html(\"\") |> ignore\r\n        element;\r\n\r\n    let clearAndGetChartElement() = clearAndGetParentChartDiv(\"#payoffchart\") |> ignore\r\n    \r\n    let drawLineChart (data: LineData array) =      \r\n        let chart = genrateChart data\r\n        let parentDiv = clearAndGetParentChartDiv(\"#payoffchart\")\r\n        let chartElement = parentDiv.append(\"svg\");\r\n        let chartElement = D3.Globals.select(\"#payoffchart\")\r\n        chartElement.style(\"height\",\"500px\") |> ignore\r\n        chartElement.datum(data).call(chart) |> ignore\r\n\r\n    let drawPayoff data =\r\n        let payoff = \r\n            match data with\r\n                | SingleYear (strategyData, legsData) ->\r\n                    let legLines = buildLines legsData\r\n                    let strategyLine = {\r\n                        key = \"Strategy\"\r\n                        values = strategyData |> tuplesToPoints\r\n                    }\r\n                        \r\n                    seq {\r\n                        yield! legLines\r\n                        yield strategyLine\r\n                    } |> Array.ofSeq\r\n                | _ -> failwith \"not implemented\"\r\n\r\n        drawLineChart payoff        "]}